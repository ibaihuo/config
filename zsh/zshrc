# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="robbyrussell"
# ZSH_THEME="random"
ZSH_THEME="renewjoy"
#ZSH_THEME="rkj"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
#plugins=(git svn)
plugins=(git svn python)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...
#标题栏、任务栏样式{{{
case $TERM in (*xterm*|*rxvt*|(dt|k|E)term)
  precmd () { print -Pn "\e]0;%n@%M//%/\a" }
  preexec () { print -Pn "\e]0;%n@%M//%/\ $1\a" }
  ;;
esac
#}}}

#关于历史纪录的配置 {{{
#历史纪录条目数量
export HISTSIZE=1000
#注销后保存的历史纪录条目数量
export SAVEHIST=1000
#历史纪录文件
#export HISTFILE=~/.zhistory
#以附加的方式写入历史纪录
setopt INC_APPEND_HISTORY
#如果连续输入的命令相同，历史纪录中只保留一个
#setopt HIST_IGNORE_DUPS      
#为历史纪录中的命令添加时间戳      
setopt EXTENDED_HISTORY      

#启用 cd 命令的历史纪录，cd -[TAB]进入历史路径
setopt AUTO_PUSHD
#相同的历史路径只保留一个
#asetopt PUSHD_IGNORE_DUPS

#在命令前添加空格，不将此命令添加到纪录文件中
#setopt HIST_IGNORE_SPACE      
#}}}

# #每个目录使用独立的历史纪录{{{
# cd() {
#    builtin cd "$@"                             # do actual cd
#    fc -W                                       # write current history  file
#    local HISTDIR="$HOME/.zsh_history$PWD"      # use nested folders for history
#        if  [ ! -d "$HISTDIR" ] ; then          # create folder if needed
#            mkdir -p "$HISTDIR"
#        fi
#        export HISTFILE="$HISTDIR/zhistory"     # set new history file
#    touch $HISTFILE
#    local ohistsize=$HISTSIZE
#        HISTSIZE=0                              # Discard previous dir's history
#        HISTSIZE=$ohistsize                     # Prepare for new dir's history
#    fc -R                                       #read from current histfile
# }
# mkdir -p $HOME/.zsh_history$PWD
# export HISTFILE="$HOME/.zsh_history$PWD/zhistory"

function allhistory { cat $(find $HOME/.zsh_history -name zhistory) }
function convhistory {
           sort $1 | uniq |
           sed 's/^:\([ 0-9]*\):[0-9]*;\(.*\)/\1::::::\2/' |
           awk -F"::::::" '{ $1=strftime("%Y-%m-%d %T",$1) "|"; print }'  
}
#使用 histall 命令查看全部历史纪录
function histall { convhistory =(allhistory) |
           sed '/^.\{20\} *cd/i\\' }
#使用 hist 查看当前目录历史纪录
function hist { convhistory $HISTFILE }

#全部历史纪录 top44
function top44 { allhistory | awk -F':[ 0-9]*:[0-9]*;' '{ $1="" ; print }' | sed 's/ /\n/g' | sed '/^$/d' | sort | uniq -c | sort -nr | head -n 44 }

#}}}

#a杂项 {{{
#允许在交互模式中使用注释  例如：
#cmd #这是注释
setopt INTERACTIVE_COMMENTS      
     
#启用自动 cd，输入目录名回车进入目录
#稍微有点混乱，不如 cd 补全实用
#setopt AUTO_CD
     
#扩展路径
#/v/c/p/p => /var/cache/pacman/pkg
setopt complete_in_word
     
#禁用 core dumps
limit coredumpsize 0

#Emacs风格 键绑定
bindkey -e
#设置 [DEL]键 为向后删除
bindkey "\e[3~" delete-char

#以下字符视为单词的一部分
#WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
##LEO注释了这部分
#}}}


#自动补全功能 {{{
setopt AUTO_LIST
setopt AUTO_MENU
#开启此选项，补全时会直接选中菜单项
#setopt MENU_COMPLETE

autoload -U compinit
compinit

#自动补全缓存
#zstyle ':completion::complete:*' use-cache on
#zstyle ':completion::complete:*' cache-path .zcache
#zstyle ':completion:*:cd:*' ignore-parents parent pwd

#自动补全选项
zstyle ':completion:*:match:*' original only
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate

#路径补全
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-shlashes 'yes'
zstyle ':completion::complete:*' '\\'

zstyle ':completion:*' menu select
zstyle ':completion:*:*:default' force-list always

#彩色补全菜单 
eval $(dircolors -b) 
export ZLSCOLORS="${LS_COLORS}"
zmodload zsh/complist
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

#修正大小写
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
#错误校正      
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

#kill 命令补全      
compdef pkill=kill
compdef pkill=killall
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:processes' command 'ps -au$USER'

#补全类型提示分组 
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
#}}}

##行编辑高亮模式 {{{
# Ctrl+@ 设置标记，标记和光标点之间为 region
zle_highlight=(region:bg=magenta #选中区域 
              special:bold      #特殊字符
              isearch:underline)#搜索时使用的关键字
#}}}

##空行(光标在行首)补全 "cd " {{{
user-complete(){
   case $BUFFER in
       "" )                       # 空行填入 "cd "
           BUFFER="cd "
           zle end-of-line
           zle expand-or-complete
           ;;
       "cd --" )                  # "cd --" 替换为 "cd +"
           BUFFER="cd +"
           zle end-of-line
           zle expand-or-complete
           ;;
       "cd +-" )                  # "cd +-" 替换为 "cd -"
           BUFFER="cd -"
           zle end-of-line
           zle expand-or-complete
           ;;
       * )
           zle expand-or-complete
           ;;
   esac
}
zle -N user-complete
bindkey "\t" user-complete
#}}}

##在命令前插入 sudo {{{
#定义功能 
#sudo-command-line() {
#    [[ -z $BUFFER ]] && zle up-history
#    [[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
#    zle end-of-line                 #光标移动到行末
#}
#zle -N sudo-command-line
#定义快捷键为： [Esc] [Esc]
#bindkey "\e\e" sudo-command-line
#}}}

# 使用emacsclient 的时候，如果emacs --daemon没有启动，下面这行自动启动
export ALTERNATE_EDITOR=""

# 设置默认编辑器
export EDITOR='emacsclient -t'

# 定义别名
#alias -g e='emacs -nw'
alias -g e='emacsclient -t'


 
#命令别名 {{{
# 下面是非人性化的设置，当你在一台没有进行如下设置的机器上，误删除文件就明白了
# alias -g cp='cp -i'
# alias -g mv='mv -i'
# alias -g rm='rm -i'

alias -g ls='ls -X -F --color=auto'
alias -g ll='ls -l'
alias -g la='ls -a'

alias -g grep='grep --color=auto'


alias -g chrome='/opt/google/chrome/chrome'
#alias -g tk='tmux kill-server'
#哈哈哈，我现在有了byobu
alias -g tm='tmux'
alias -g bb='byobu-tmux'


#[Esc][h] man 当前命令时，显示简短说明 
alias run-help >&/dev/null && unalias run-help
autoload run-help

#历史命令 top10
alias top10='print -l  ${(o)history%% *} | uniq -c | sort -nr | head -n 10'
#}}}

#路径别名 {{{
#进入相应的路径时只要 cd ~xxx

hash -d github='/home/renewjoy/Documents/github/'

#hash -d ARCH="/mnt/arch"
#hash -d PKG="/var/cache/pacman/pkg"
#hash -d E="/etc/env.d"
#hash -d C="/etc/conf.d"
#hash -d I="/etc/rc.d"
#hash -d X="/etc/X11"
#}}}
   
##afor Emacs {{{
#在 Emacs终端 中使用 Zsh 的一些设置 不推荐在 Emacs 中使用它
if [[ "$TERM" == "dumb" ]]; then
setopt No_zle
PROMPT='%n@%M %/
>>'
alias ls='ls -F'
fi     
#}}}

#{{{自定义补全
#补全 ping
zstyle ':completion:*:ping:*' hosts 192.168.128.1{38,} www.g.cn \
      192.168.{1,0}.1{{7..9},}

#补全 ssh scp sftp 等
#my_accounts=(
#{r00t,root}@{192.168.1.1,192.168.0.1}
#kardinal@linuxtoy.org
#123@211.148.131.7
#)
#zstyle ':completion:*:my-accounts' users-hosts $my_accounts
#}}}

####{{{
function calc { echo $(($@)) }
function timeconv { date -d @$1 +"%Y-%m-%d %T" }

# }}}


export PATH=$PATH:/opt/dse/bin
export DSE_HOME=/opt/dse

export PAGER='/usr/bin/most -s'
export BROWSER='/usr/bin/most -s'

# for redis
export PATH=$PATH:/usr/local/redis/bin

# for svn
export PATH=$PATH:/usr/local/svn/bin
export EDITOR=vim

# for nodejs
export PATH=$PATH:/usr/local/nodejs/bin

# for chrome
export PATH=$PATH:/opt/google/chrome/

# 添加mongo
export PATH=$PATH:~/bin/mongo/bin
export PATH=$PATH:~/bin/redis/src

export PATH=$PATH:/opt/foxit/

# for anaconda
export PATH="/home/renewjoy/anaconda/bin:$PATH"

# for spark
export PATH="/opt/spark/bin:$PATH"

# for java
export JAVA_HOME=/opt/jdk
export PATH=${JAVA_HOME}/bin:$PATH

# android adt
export PATH="/opt/adt/sdk/platform-tools:$PATH"
# for android tools
export PATH="/opt/adt/sdk/tools:$PATH"
# for apache ant
export PATH="/opt/ant/bin:$PATH"

export PATH=$PATH:/home/renewjoy/bin/Sencha/Cmd/5.0.3.324/

# for golang
export GOROOT=/usr/local/go
export GOPATH=~/Templates/Golang
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

# 在freemind， yEd中输入中文
# export XMODIFIERS=@im=fcitx
# export GTK_IM_MODULE=fcitx
# export QT_IM_MODULE=xim
export XMODIFIERS="@im=fcitx"
export XIM=fcitx
export XIM_PROGRAM=fcitx
export GTK_IM_MODULE=xim
export QT_IM_MODULE=xim

export TERMINAL=gnome-terminal